# -*- coding: utf-8 -*-
"""Untitled19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-hqUDC0t17mdTHQ_DDR3sGBk5NDkzp4D
"""

pip install emoji

import emoji
from textblob import TextBlob
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from collections import Counter

emoji_sentiment = {
    "🙂": "positive",
    "❤️": "positive",
    "😊": "positive",
    "😍": "positive",
    "😄": "positive",
    "😂": "positive",
    "😎": "positive",
    "💖": "positive",
    "😜": "positive",

    "😢": "negative",
    "😡": "negative",
    "😞": "negative",
    "😔": "negative",
    "😒": "negative",
    "😣": "negative",
    "💔": "negative",
    "😱": "negative",
    "😭": "negative",

    "😐": "neutral",
    "😶": "neutral",
    "🤔": "neutral",
    "😌": "neutral",
    "😴": "neutral",
    "😜": "neutral",

    "😷": "neutral",  # Add more neutral emojis as needed
    "🤗": "positive",
    "😇": "positive",
    "🌸": "positive",
    "✨": "positive"
}

def analyze_text_sentiment(text):
    blob = TextBlob(text)
    sentiment = blob.sentiment.polarity
    print(f"Text sentiment: {sentiment}")  # Debug print to check sentiment value
    if sentiment > 0:
        return "positive"
    elif sentiment < 0:
        return "negative"
    else:
        return "neutral"

def analyze_emoji_sentiment(text): # Add 'text' as an argument to the function
  emojis = [char['emoji'] for char in emoji.emoji_list(text)]
  print(f"Emojis found: {emojis}")
  sentiment = []
  # Remove this line, it was causing an error and is redundant:
  # emojis = [char['emoji'] for char in emoji.emoji_list(text)]
  return sentiment # Return the sentiment list

def analyze_emoji_sentiment(text):
    # Replacing emoji.EMOJI_UNICODE with emoji.EMOJI_DATA
    emojis = [char for char in text if char in emoji.EMOJI_DATA]
    sentiment = []
    for em in emojis:
        sentiment.append(emoji_sentiment.get(em, "neutral"))
    # Return an empty list if no sentiment is found
    return sentiment if sentiment else [] # Return empty list to avoid NoneType error

def combined_sentiment(text):
    text_sentiment = analyze_text_sentiment(text)
    emoji_sentiment_list = analyze_emoji_sentiment(text)

def combined_sentiment(text):
    text_sentiment = analyze_text_sentiment(text) # Calculate text sentiment
    emoji_sentiment_list = analyze_emoji_sentiment(text) # Calculate emoji sentiment
    print(f"Text sentiment: {text_sentiment}")  # Debug print to check text sentiment
    print(f"Emoji sentiment list: {emoji_sentiment_list}")  # Debug print to check emoji sentiment
    # Call determine_sentiment to combine the sentiments
    return determine_sentiment(text_sentiment, emoji_sentiment_list)

def determine_sentiment(text_sentiment, emoji_sentiment_list):
  if "positive" in [text_sentiment] + emoji_sentiment_list:
        return "positive"
  elif "negative" in [text_sentiment] + emoji_sentiment_list:
          return "negative"
  else:
         return "neutral"

emoji_usage = []

def track_emoji_usage(text):
    emojis = [char for char in text if char in emoji.EMOJI_UNICODE]
    emoji_usage.extend(emojis)

leaderboard = []

def update_leaderboard(username, user_prediction, actual_prediction):
    if user_prediction == actual_prediction:
        leaderboard.append((username, 10))  # 10 points for correct prediction
    else:
        leaderboard.append((username, 0))

def get_leaderboard():
    return sorted(leaderboard, key=lambda x: x[1], reverse=True)

def user_input():
  username = input("Enter your username: ")
  text = input("Enter your text (with emojis): ")
  user_prediction = input("Enter your predicted sentiment (positive, negative, neutral): ")
  return username, text, user_prediction

username, text, user_prediction = user_input()

actual_prediction = combined_sentiment(text)

print(f"Model's prediction: {actual_prediction}")

update_leaderboard(username, user_prediction, actual_prediction)
print(f"Leaderboard: {get_leaderboard()}")
